# Copyright 2016 ITEA 12004 SEAS Project.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> . #Resource data framework
@prefix owl: <http://www.w3.org/2002/07/owl#> .     #Owl ontology language
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .   #RDF schema 
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .  #XML standard datatypes
@prefix dc: <http://purl.org/dc/terms/> .  #Dublin Core Metadata Initiative terms
@prefix vann: <http://purl.org/vocab/vann/> .  #A vocabulary for annotating vocabulary descriptions
@prefix voaf: <http://purl.org/vocommons/voaf#> . #A vocabulary of a friend, for describing relations between linked vocabularies
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> . #Semantic web vocabulary status ontology
@prefix foaf: <http://xmlns.com/foaf/0.1/>.
@prefix ssn: <https://www.w3.org/ns/ssn/>.
@prefix cc: <http://creativecommons.org/ns#>.
@prefix dul: <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#>. # The DOLCE+DnS Ultralite ontology.
@prefix liner: <https://w3id.org/liner/>.
@prefix skos: <http://www.w3.org/2004/02/skos/core#>.
@prefix qb: <http://purl.org/linked-data/cube#>.

@prefix seas: <https://w3id.org/seas/>.
@base <https://w3id.org/seas/>.

seas:ProcessOntology a owl:Ontology , voaf:Vocabulary ;
  dc:title "seas-Process ontology."@en ;
  dc:description """This ontology extends the core of the SSN ontology at https://www.w3.org/ns/ssn/ with references to DUL, and focuses on Feature of interest and their properties.

  See also <https://w3id.org/seas/ProcessOntology-0.10.pdf>"""@en ;
  dc:issued "2016-07-01"^^xsd:date ;
  dc:modified "2016-07-01"^^xsd:date ;
  dc:author <http://www.maxime-lefrancois.info/me#> ;
  cc:license <http://creativecommons.org/licenses/by/4.0/> ;
  vann:preferredNamespacePrefix "seas" ;
  vann:preferredNamespaceUri <https://w3id.org/seas/> ;  
  owl:versionIRI <https://w3id.org/seas/ProcessOntology/0.10> ;
  owl:versionInfo "v0.10" ;
  owl:imports seas:FeatureOfInterestOntology ;
  owl:imports seas:PropertyBindingConceptsOntology ;
  liner:entailmentRegime seas:ProcessOntologyEntailmentRegime . 


# seas:Process

seas:Process a owl:Class ;
  rdfs:label "Process"@en ;
  rdfs:comment """The description of a process. A process may describe input and output properties.

  inputs and outputs SHOULD be either qb:DataSet, or URIs of RDF Named Graphs.
  
  For any input or output that is a qb:DataSet, the property links the process instance to the qb:DataStructureDefinition that describes the structure of the qb:DataSet which will be given as input or output.
  
  For any input or output that is a URI of a RDF Named Graph, the property links the process instance to a seas:GraphStructureDefinition that describes the structure of the named graph which will be given as input or output.

    A process may be a description of a sensing or acting transfer function, or a Estimating algorithm.
    Prototypical subclasses of seas:Process processes are: seas:Sensing, seas:Acting, seas:Estimating. 

   prototypical inputs are:
   - the stimulus that triggers its executions (an event description); 
   - the input dataset it uses as a command (a data structure definition).

   prototypical outputs are: 
   - the effect it has on the world (an event description);
   - the output dataset it generates (a data structure definition).

    The following RDF graph describes a process with input <observes> and output <result>, it also describe the data structure definition for these inputs and outputs.

    <process> a seas:Process ;
      seas:input <observes> ;
      seas:output <plan> ;
      <observes> [ 
        a qb:DataStructureDefinition ; 
        qb:component [ qb:dimension <time> ] , 
                     [ qb:measure <distance_1> ] , 
                     [ qb:measure <temp_2> ] ,
                     [ qb:measure <power_min> ] , 
                     [ qb:measure <power_max> ] ] ;
      <plan> [ 
        a qb:DataStructureDefinition ; 
        qb:component [ qb:dimension <time> ] , 
                     [ qb:measure <power_min> ] , 
                     [ qb:measure <power_max> ] ] .


   Furthermore, a Process may describe bindings from input and output dataset measures to actual properties of actual features of interest, and further describe how these measures relate to the actual properties. This is dones through links to seas:PropertyBindings. For instance, the following RDF graph describes that:
    - measure <distance_1> in the input dataset is a measure of a known property <sun/distance>;
    - measure <temp_2> in the input dataset is the measure of property <temperature> of an unknown feature of interest;
    - measure <power_min> and <power_max> in the input and output datasets are measures of the minimum and maximum values of an unknown property of another feature of interest.

   <process> <distance_1> [
     a qb:PropertyBinding ;
     seas:toProperty <sun/distance> ] .

   <process> <temp_2> [ 
     a qb:PropertyBinding ;
     seas:movingthings [ 
       a seas:Property ; 
       seas:propertyKey <temperature> ; 
       seas:isPropertyOf _:someFeatureOfInterest ] .

   <process> <power_min> [
     a qb:PropertyBinding ;     
     seas:concept seas:minimum ;
     seas:movingthings [ 
       a seas:Property ; 
       seas:propertyKey _:somePropertyKey ; 
       seas:isPropertyOf _:anotherFeatureOfInterest ]
   ] .

   <process> <power_min> [
     a qb:PropertyBinding ;     
     seas:concept seas:maximum ;
     seas:movingthings [ 
       a seas:Property ; 
       seas:propertyKey _:somePropertyKey ; 
       seas:isPropertyOf _:anotherFeatureOfInterest ]
   ] .

   In the first version of the SSN ontology, ssn:Process was a subclass of dul:Method. A dul:Method is a Description that defines or uses concepts in order to guide carrying out actions aimed at a solution with respect to a problem. It is different from a Plan, because plans could be carried out in order to follow a method, but a method can be followed by executing alternative plans."""@en ;
  rdfs:subClassOf [ owl:onProperty seas:input ; owl:allValuesFrom qb:InputProperty ] ;
  rdfs:subClassOf [ owl:onProperty seas:output ; owl:allValuesFrom qb:OutputProperty ] ;
  rdfs:subClassOf [ owl:onProperty seas:hasInput ; owl:allValuesFrom qb:DataStructureDefinition ] ;
  rdfs:subClassOf [ owl:onProperty seas:hasOutput ; owl:allValuesFrom qb:DataStructureDefinition ] ;
  vs:term_status "testing" ;
  rdfs:isDefinedBy seas:ProcessOntology .

# inputs and outputs

seas:input a owl:ObjectProperty ;
  rdfs:label "input" ;
  rdfs:comment """Relation between a seas:Process and a seas:InputProperty. Any instance of seas:InputProperty is also a sub property of seas:hasInput."""@en ;
  rdfs:domain seas:Process ;
  rdfs:range seas:InputProperty ;
  vs:term_status "testing" ;
  rdfs:isDefinedBy seas:ProcessOntology .

seas:output a owl:ObjectProperty ;
  rdfs:label "output" ;
  rdfs:comment """Relation between a seas:Process and a seas:OutputProperty. Any instance of seas:OutputProperty is also a sub property of seas:hasOutput."""@en ;
  rdfs:domain seas:Process ;
  rdfs:range seas:OutputProperty ;
  vs:term_status "testing" ;
  rdfs:isDefinedBy seas:ProcessOntology .

seas:InputProperty a rdfs:Class , owl:Class ;
  rdfs:label "Input property"@en ;
  rdfs:comment "The class of components which represent an input of the process, process executor, or process execution."@en ;
  rdfs:isDefinedBy seas:ProcessOntology .

seas:OutputProperty a rdfs:Class , owl:Class ;
  rdfs:label "Output property"@en ;
  rdfs:comment "The class of components which represent an output of the process, process executor, or process execution."@en ;
  rdfs:isDefinedBy seas:ProcessOntology .


seas:hasInput a owl:ObjectProperty ;
  rdfs:label "has input" ;
  rdfs:comment """Relation between:
  (a) a seas:Process and the qb:DataStructureDefinition of inputs;
  (b) a seas:ProcessExecution and the actual input qb:DataSet."""@en ;
  vs:term_status "testing" ;
  rdfs:isDefinedBy seas:ProcessOntology .

seas:hasNamedGraphInput a owl:ObjectProperty ;
  rdfs:label "has named graph input" ;
  rdfs:comment """Relation between:
  (a) a seas:Process and the qb:DataStructureDefinition of inputs;
  (b) a seas:ProcessExecution and the actual input qb:DataSet."""@en ;
  vs:term_status "testing" ;
  rdfs:isDefinedBy seas:ProcessOntology .

seas:hasOutput a owl:ObjectProperty ;
  rdfs:label "has output" ;
  rdfs:comment """Relation between:
  (a) a seas:Process and the qb:DataStructureDefinition of outputs;
  (b) a seas:ProcessExecution and the actual output qb:DataSet."""@en ;
  vs:term_status "testing" ;
  rdfs:isDefinedBy seas:ProcessOntology .


seas:observes a rdf:Property , seas:InputProperty , owl:ObjectProperty , owl:FunctionalProperty ;
  rdfs:subPropertyOf seas:hasInput ;
  rdfs:label "observes"@en ;
  rdfs:comment """Input relation between:
  (a) a seas:Process and the qb:DataStructureDefinition that describes actual observations of values of phenomenons of the real world;
  (b) a seas:ProcessExecution and the qb:DataSet that is the observed values of phenomenons of the real world."""@en ;
  vs:term_status "testing" ;
  rdfs:isDefinedBy seas:ProcessOntology .

seas:command a rdf:Property , seas:InputProperty , owl:ObjectProperty , owl:FunctionalProperty ;
  rdfs:subPropertyOf seas:hasInput ;
  rdfs:label "command"@en ;
  rdfs:comment """Input relation between:
  (a) a seas:Process and the qb:DataStructureDefinition that describes commands for values of phenomenons;
  (b) a seas:ProcessExecution and the qb:DataSet that is the actual commands for values of phenomenons."""@en ;
  vs:term_status "testing" ;
  rdfs:isDefinedBy seas:ProcessOntology .

seas:estimates a rdf:Property , seas:OutputProperty , owl:ObjectProperty , owl:FunctionalProperty ;
  rdfs:label "estimation"@en ;
  rdfs:comment """Output relation between:
  (a) a seas:Process and the qb:DataStructureDefinition that describes some estimation of values of phenomenons;
  (b) a seas:ProcessExecution and the actual qb:DataSet that is an estimation of values of phenomenons."""@en ;
  rdfs:subPropertyOf seas:hasOutput ;
  vs:term_status "testing" ;
  rdfs:isDefinedBy seas:ProcessOntology .

seas:effects a rdf:Property , seas:InputProperty , owl:ObjectProperty , owl:FunctionalProperty ;
  rdfs:label "effects"@en ;
  rdfs:comment """Output relation between:
  (a) a seas:Process and the qb:DataStructureDefinition that describes the effect on the real world;
  (b) a seas:ProcessExecution and the actual qb:DataSet that describes the effect on the real world."""@en ;
  rdfs:subPropertyOf seas:hasOutput ;
  vs:term_status "testing" ;
  rdfs:isDefinedBy seas:ProcessOntology .


seas:Sensing a owl:Class ;
  rdfs:subClassOf seas:Process ;
  rdfs:label "Sensing" ;
  rdfs:comment """The description of a process that takes an observation (i.e, actual values of phenomenons of the real world), and outputs an estimation of values of phenomenons."""@en ;
  rdfs:subClassOf [ owl:onProperty seas:command ; owl:cardinality 0 ] ;
  rdfs:subClassOf [ owl:onProperty seas:observes ; owl:cardinality 1 ] ;
  rdfs:subClassOf [ owl:onProperty seas:estimates ; owl:cardinality 1 ] ;
  rdfs:subClassOf [ owl:onProperty seas:effects ; owl:cardinality 0 ] ;
  vs:term_status "testing" ;
  rdfs:isDefinedBy seas:ProcessOntology .

seas:Acting a owl:Class ;
  rdfs:subClassOf seas:Process ;
  rdfs:label "Acting" ;
  rdfs:comment "The description of a process that takes a command as input, and that outputs an effect. This effect impacts the physical world, i.e., its describes changes in values of phenomenons, might it be a motion, a display, the emission of a sound..."@en ;
  rdfs:subClassOf [ owl:onProperty seas:command ; owl:cardinality 1 ] ;
  rdfs:subClassOf [ owl:onProperty seas:observes ; owl:cardinality 0 ] ;
  rdfs:subClassOf [ owl:onProperty seas:estimates ; owl:cardinality 0 ] ;
  rdfs:subClassOf [ owl:onProperty seas:effects ; owl:cardinality 1 ] ;
  vs:term_status "testing" ;
  rdfs:isDefinedBy seas:ProcessOntology .

seas:Estimating a owl:Class ;
  rdfs:subClassOf seas:Process ;
  rdfs:label "Estimating" ;
  rdfs:comment "The description of a process that takes a command as input, and that outputs an estimation of values of phenomenons."@en ;
  rdfs:subClassOf [ owl:onProperty seas:command ; owl:cardinality 1 ] ;
  rdfs:subClassOf [ owl:onProperty seas:observes ; owl:cardinality 0 ] ;
  rdfs:subClassOf [ owl:onProperty seas:estimates ; owl:cardinality 1 ] ;
  rdfs:subClassOf [ owl:onProperty seas:effects ; owl:cardinality 0 ] ;
  vs:term_status "testing" ;
  rdfs:isDefinedBy seas:ProcessOntology .


# seas:ProcessExecutor

seas:ProcessExecutor a owl:Class ;
  rdfs:label "Process Executor" ;
  rdfs:comment """A Process Executor can execute (implements) process. A Process Executor may be a physical device, a computational method, a laboratory setup with a person following a method, or any other thing that can follow a Process. 

   Furthermore, a Process Executor may describe bindings from input and output dataset measures to actual properties of actual features of interest, and further describe how these measures relate to the actual properties. This is dones through links to seas:PropertyBindings. 

   For instance, a speed sensor in a car will be linked to the speed property of the car, hence the output of every observation made by that speed sensor will also be linked to the same speed property. On the other hand, the output of each observation made by a speed carmera may be linked to the speed property of a different car. 

   For instance, the following RDF graph describes that a web service implements process <process>, and further specifies property bindings of <process> as follows:
    - measure <temp_2> in the input dataset is the measure of property <house/1/temperature>, which is property <temperature> of feature of interest <house/1> ;
    - measure <power_min> and <power_max> in the input and output datasets are measures of the minimum and maximum values of an property <power> of an unknown feature of interest.

   <house/1/temperature> seas:propertyKey <temperature> ; 
                        seas:isPropertyOf <house/1> .

   <webservice> seas:implements <process> .

   <webservice> <temp_2> <house/1/temperature> .

   <webservice> seas:propertyBinding [
     a qb:PropertyBinding ;     
     seas:concept seas:minimum ;
     seas:fromComponent <power_min> ;
     seas:toProperty [ 
       a seas:Property ; 
       seas:propertyKey <power> ; 
   ] .

  # no need to add triples about the <power_max> measure, as we may infer them from the description of <process>. 

  Prototypical sub classes of ProcessExecutor are Sensor, Actuator, Estimator.

  Links to ProcessExecution describe the Executions made.

  Links to Processes define how the executor can make Executions (it may implement several Processes). A Process Executor implements each of the methods used by the Executions it made. 

  Other metadata may detail vendor etc. 

  This concept generalizes ssn:Sensor, which in the latest version of the SSN ontology is a subclass of dul:Object. A dul:Object is any physical, social, or mental object, or a substance."""@en ;
  rdfs:subClassOf seas:FeatureOfInterest ;
  vs:term_status "testing" ;
  rdfs:isDefinedBy seas:ProcessOntology .

seas:Estimator a owl:Class ;
  rdfs:subClassOf seas:ProcessExecutor ;
  rdfs:label "Estimator" ;
  rdfs:comment """An Estimator is an entity which implements a Estimating process, and executes Estimations."""@en ;
  owl:equivalentClass [ owl:onProperty seas:implements ; owl:someValuesFrom seas:Estimating ] ;
  owl:equivalentClass [ owl:onProperty seas:executed ; owl:someValuesFrom seas:Estimation ] ;
  vs:term_status "testing" ;
  rdfs:isDefinedBy seas:ProcessOntology .

seas:Sensor a owl:Class ;
  rdfs:subClassOf seas:ProcessExecutor ;
  rdfs:label "Sensor" ;
  rdfs:comment """A Sensor is an entity which implements a Sensing process, and executes Observations. It is able to observe the physical world."""@en ;
  owl:equivalentClass [ owl:onProperty seas:implements ; owl:someValuesFrom seas:Sensing ] ;
  owl:equivalentClass [ owl:onProperty seas:executed ; owl:someValuesFrom seas:Observation ] ;
  vs:term_status "testing" ;
  rdfs:isDefinedBy seas:ProcessOntology .

seas:Actuator a owl:Class ;
  rdfs:subClassOf seas:ProcessExecutor ;
  rdfs:label "Actuator" ;
  rdfs:comment """An Actuator is an entity which implements an Acting process, and executes Actuations. It is able to act upon the physical world."""@en ;
  owl:equivalentClass [ owl:onProperty seas:implements ; owl:someValuesFrom seas:Acting ] ;
  owl:equivalentClass [ owl:onProperty seas:executed ; owl:someValuesFrom seas:Actuation ] ;
  vs:term_status "testing" ;
  rdfs:isDefinedBy seas:ProcessOntology .


seas:implements  a owl:ObjectProperty, owl:FunctionalProperty ;
  rdfs:label "implements" ;
  rdfs:comment """A relation between an Process Executor and a method it implements (if it implements exactly one method) in some executable way and the description of an algorithm, procedure or method.  For example, between a Sensor and the scientific measuring method that the Sensor uses to observe a Property. 

  This concept generalizes ssn:implements, which in the first version of the SSN ontology is a subproperty of dul:isDescribedBy . dul:isDescribedBy is the relation between an Entity and a Description. A Description gives a unity to a Collection of parts (the components), or constituents, by assigning a Role to each of them in the context of a whole Object (the system)."""@en ;
  vs:term_status "testing" ;
  owl:propertyChainAxiom ( seas:executed seas:methodUsed ) ;
  rdfs:isDefinedBy seas:ProcessOntology .


# seas:ProcessExecution

seas:ProcessExecution a owl:Class ;
  rdfs:label "Process Execution" ;
  rdfs:comment """A process execution is a Situation where a process has been executed by a Process Executor.


   Links to ProcessExecutor and Process describe what made the Execution and how. 

   Links to DataSets describe inputs and outputs of the Process Execution: stimulus, command, effet, result,...

   A Process Executor may describe bindings from input and output dataset measures to actual properties of actual features of interest, and further describe how these measures relate to the actual properties. This is dones through links to seas:PropertyBindings. 

   For instance, the following RDF graph describes a call to web service <webservice> to use method <process>, and further specifiesthat measures <power_min> and <power_max> in the input and output datasets are measures of the minimum and maximum values of the property <power> of feature of interest <house/1>.

   <call> seas:executedBy <webservice> ;
          seas:implements <process> .

   <call> seas:propertyBinding [
     seas:fromComponent <power_min> ;
     seas:toProperty [ 
       seas:isPropertyOf <house/1> .
   ] .

  # no need to add triples about the <power_max> measure, as we may infer them from the description of <webservice> and <process>. 

   This concept generalizes ssn:Observation, which was limited to a stimulus from exactly one property and outputted a value for exactly one property, the first being a proxy for the second.

  In the first version of the SSN ontology, ssn:Observation is defined as a subClassOf dul:Situation. A dul:Situation is a view, consistent with ('satisfying') a Description, on a set of entities.  It can also be seen as a 'relational context' created by an observer on the basis of a 'frame' (i.e. a Description).  For example, a PlanExecution is a context including some actions executed by agents according to certain parameters and expected tasks to be achieved from a Plan. Also, in the first version of SSN, instances of ssn:Observation are linked through dul:includesEvent only to instances of ssn:Stimulus. dul:includesEvent is a relation between situations and events, e.g. 'this morning I've prepared my coffee and had my fingers burnt' (i.e.: the preparation of my coffee this morning included a burning of my fingers). Property ssn:fromStimulus was used instead of dul:includeEvent in the latest SSN ontology, and SEAS defines seas:stimulus."""@en ;
  vs:term_status "testing" ;
  rdfs:subClassOf [ owl:onProperty seas:hasInput ; owl:allValuesFrom qb:DatSet ] ;
  rdfs:subClassOf [ owl:onProperty seas:hasOutput ; owl:allValuesFrom qb:DataSet ] ;
  rdfs:isDefinedBy seas:ProcessOntology .

seas:executedBy a owl:ObjectProperty, owl:FunctionalProperty ;
  rdfs:label "executed by" ;
  rdfs:comment "Relationship between an execution and the agent that made it. This concept generalizes ssn:observedBy, which in the first version of the SSN ontology is a sub property of dul:includesObject. dul:includesObject is a relation between situations and objects, e.g. 'this morning I've prepared my coffee and had my fingers burnt' (i.e.: the preparation of my coffee this morning included me)."@en ;
  vs:term_status "testing" ;
  rdfs:domain seas:ProcessExecution ;
  rdfs:range seas:ProcessExecutor ;
  owl:inverseOf seas:executed ;
  rdfs:isDefinedBy seas:ProcessOntology .
 
seas:executed a owl:ObjectProperty ;
  rdfs:label "executed" ;
  rdfs:comment "Relationship between a process executor and an execution it made."@en ;
  vs:term_status "testing" ;
  rdfs:domain seas:ProcessExecutor ;
  rdfs:range seas:ProcessExecution ;
  owl:inverseOf seas:executedBy ;
  rdfs:isDefinedBy seas:ProcessOntology .

seas:methodUsed a owl:ObjectProperty , owl:FunctionalProperty ;
  rdfs:label "method used" ;
  rdfs:comment "Relation between a ProcessExecution and the Process it executes. This concept generalizes ssn:sensingMethodUsed, which in the first version of the SSN ontology is a sub property of dul:satisfies. dul:satisfies is a relation between a Situation and a Description, e.g. the execution of a Plan satisfies that plan."@en ;
  rdfs:domain seas:ProcessExecution ;
  rdfs:range seas:Process ;
  vs:term_status "testing" ;
  rdfs:isDefinedBy seas:ProcessOntology .


seas:Estimation a owl:Class ;
  rdfs:subClassOf seas:ProcessExecution ;
  rdfs:label "Estimation" ;
  rdfs:comment """An Estimation is a Situation where an Estimating process has been executed by an Estimator. It took a command as input, and outputted an estimation of values of phenomenons."""@en ;
  owl:equivalentClass [ owl:onProperty seas:methodUsed ; owl:someValuesFrom seas:Estimating ] ;
  owl:equivalentClass [ owl:onProperty seas:executedBy ; owl:someValuesFrom seas:Estimator ] ;
  rdfs:subClassOf [ owl:onProperty seas:command ; owl:cardinality 1 ] ;
  rdfs:subClassOf [ owl:onProperty seas:observes ; owl:cardinality 0 ] ;
  rdfs:subClassOf [ owl:onProperty seas:estimates ; owl:cardinality 1 ] ;
  rdfs:subClassOf [ owl:onProperty seas:effects ; owl:cardinality 0 ] ;
  vs:term_status "testing" ;
  rdfs:isDefinedBy seas:ProcessOntology .

seas:Observation a owl:Class ;
  rdfs:subClassOf seas:ProcessExecution ;
  rdfs:label "Observation" ;
  rdfs:comment """An Observation is a Situation where a Sensing process has been executed by an Sensor. It took an observation (i.e, actual values of phenomenons of the real world), and outputted an estimation of values of phenomenons."""@en ;
  owl:equivalentClass [ owl:onProperty seas:methodUsed ; owl:someValuesFrom seas:Sensing ] ;
  owl:equivalentClass [ owl:onProperty seas:executedBy ; owl:someValuesFrom seas:Sensor ] ;
  rdfs:subClassOf [ owl:onProperty seas:command ; owl:cardinality 0 ] ;
  rdfs:subClassOf [ owl:onProperty seas:observes ; owl:cardinality 1 ] ;
  rdfs:subClassOf [ owl:onProperty seas:estimates ; owl:cardinality 1 ] ;
  rdfs:subClassOf [ owl:onProperty seas:effects ; owl:cardinality 0 ] ;
  vs:term_status "testing" ;
  rdfs:isDefinedBy seas:ProcessOntology .

seas:Actuation a owl:Class ;
  rdfs:subClassOf seas:ProcessExecution ;
  rdfs:label "Actuation" ;
  rdfs:comment """An Actuation is a Situation where an Acting process has been executed by an Actuator. It took a command as input, and outputted an effect. This effect impacts the physical world, i.e., its describes changes in values of phenomenons."""@en ;
  owl:equivalentClass [ owl:onProperty seas:methodUsed ; owl:someValuesFrom seas:Acting ] ;
  owl:equivalentClass [ owl:onProperty seas:executedBy ; owl:someValuesFrom seas:Actuator ] ;
  rdfs:subClassOf [ owl:onProperty seas:command ; owl:cardinality 1 ] ;
  rdfs:subClassOf [ owl:onProperty seas:observes ; owl:cardinality 0 ] ;
  rdfs:subClassOf [ owl:onProperty seas:estimates ; owl:cardinality 0 ] ;
  rdfs:subClassOf [ owl:onProperty seas:effects ; owl:cardinality 1 ] ;
  vs:term_status "testing" ;
  rdfs:isDefinedBy seas:ProcessOntology .

# seas:PropertyBinding

seas:propertyBinding a owl:Property ;
  rdfs:label "property binding"@en ;
  rdfs:comment """Links a seas:Process, seas:ProcessExecutor, or seas:ProcessExecution to a binding from a component to a property key, potentially to be interpreted as defined by a skos:Concept."""@en ;
  rdfs:range seas:PropertyBinding ;
  rdfs:isDefinedBy seas:ProcessOntology .

seas:PropertyBinding a owl:Class ;
  rdfs:label "Property Binding"@en ;
  rdfs:comment "The class of property bindings, that precise which seas:Property is valued by some qb:DataSet component. Additionaly, one may use seas:concept to further specify how this value must be interpreted (aggregated values for instance). "@en ;
  vs:term_status "testing" ;
  rdfs:subClassOf [ owl:onProperty seas:fromComponent ; owl:cardinality 1 ] ;
  rdfs:subClassOf [ owl:onProperty seas:toProperty ; owl:cardinality 1 ] ;
  rdfs:isDefinedBy seas:ProcessOntology .

seas:fromComponent a owl:Property , owl:FunctionalProperty ;
  rdfs:label "from component"@en ;
  rdfs:comment """Links a seas:PropertyBinding to the one and only component it binds. The Functional aspect of this property is important to enable the merge of property bindings from a Process and a Process Executor into those of a Process Execution."""@en ;
  rdfs:domain seas:PropertyBinding ;
  rdfs:range seas:ComponentProperty ;
  rdfs:isDefinedBy seas:ProcessOntology .

seas:toProperty a owl:Property , owl:FunctionalProperty ;
  rdfs:label "to property"@en ;
  rdfs:comment """Links a seas:PropertyBinding to the one and only property it binds. The Functional aspect of this property is important to enable the merge of property bindings from a Process and a Process Executor into those of a Process Execution."""@en ;
  rdfs:domain seas:PropertyBinding ;
  rdfs:range seas:Property ;
  rdfs:isDefinedBy seas:ProcessOntology .

seas:concept a owl:property ;
  rdfs:label "concept"@en ;
  rdfs:comment "Links a property binding to a SKOS concept that specifies how this measure must be interpreted. Common objects for this property are seas:max, seas:min, seas:rms, seas:sum, seas:cumulative, etc. They are defined in ontology seas:PropertyBindingConceptOntology."@en ;
  vs:term_status "testing" ;
  rdfs:domain seas:PropertyBinding ;
  rdfs:range skos:Concept ;
  rdfs:isDefinedBy seas:ProcessOntology .

seas:isProxyFor a owl:ObjectProperty ;
  rdfs:label "is proxy for"@en ;
  rdfs:comment """A relation from a Property to a Property that the Property is serving as a proxy for.  For example, the height of the quicksilver serves as a proxy for the temperature in a room, or a switch on-off status serves as a proxy for the luminosity in a room."""@en ;
  vs:term_status "testing" ;
  rdfs:domain seas:Property ;
  rdfs:range seas:Property ;
  rdfs:isDefinedBy seas:ProcessOntology .

[] a owl:AllDisjointClasses ;
   owl:members ( seas:FeatureOfInterest seas:FeatureOfInterestDefinition seas:Property seas:PropertyKey 
    seas:InputProperty seas:OutputProperty seas:ProcessExecution seas:Process seas:PropertyBinding) .

[] a owl:AllDisjointClasses ;
   owl:members ( seas:FeatureOfInterestDefinition seas:Property seas:PropertyKey 
    seas:InputProperty seas:OutputProperty seas:ProcessExecutor seas:ProcessExecution seas:Process seas:PropertyBinding ) .

# alignment to SSN

seas:Process rdfs:subClassOf ssn:Process .

seas:hasInput rdfs:subPropertyOf ssn:hasInput .

seas:hasOutput rdfs:subPropertyOf ssn:hasOutput .

seas:Sensing rdfs:subClassOf ssn:Sensing .

ssn:Sensor rdfs:subClassOf seas:Sensor .

ssn:Observation rdfs:subClassOf seas:Observation .

ssn:implements rdfs:subPropertyOf seas:implements .

ssn:observedBy rdfs:subPropertyOf seas:executedBy .

ssn:sensingMethodUsed rdfs:subPropertyOf seas:methodUsed .


# description of the entailment regime 

seas:ProcessOntologyEntailmentRegime a liner:EntailmentRegime ;
  rdfs:label "seas-ProcessOntology entailment regime"@en ;
  liner:extends seas:FeatureOfInterestOntologyEntailmentRegime ;
  liner:axiomaticTriples seas:ProcessOntology ;
  liner:inferenceRules [
    liner:asSPARQLRules (
      <https://w3id.org/seas/ProcessOntologyRule-1>
      <https://w3id.org/seas/ProcessOntologyRule-2> 
      <https://w3id.org/seas/ProcessOntologyRule-3> 
      <https://w3id.org/seas/ProcessOntologyRule-4> 
      <https://w3id.org/seas/ProcessOntologyRule-5> ) ] .

<https://w3id.org/seas/ProcessOntologyRule-1> liner:rule """
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX seas: <https://w3id.org/seas/>
INSERT { 
  ?p a rdf:Property , owl:ObjectProperty , owl:FunctionalProperty ;
    rdfs:subPropertyOf seas:hasInput .
} WHERE { 
 ?p a seas:InputProperty .
}"""^^<urn:iana:type:application/sparql-rule> . 

<https://w3id.org/seas/ProcessOntologyRule-2> liner:rule """
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX seas: <https://w3id.org/seas/>
INSERT { 
 ?o a seas:PropertyBinding .
} WHERE { 
  {?proc a seas:Process .} 
  UNION {?proc a seas:ProcessExecutor .} 
  UNION {?proc a seas:ProcessExecution .} 
 ?comp a qb:ComponentProperty .
 ?proc ?comp ?o .
}"""^^<urn:iana:type:application/sparql-rule> . 

<https://w3id.org/seas/ProcessOntologyRule-3> rdfs:comment "ensures there is a property binding for each measure that the process or the process executor defines a property binding for."@en ;
  liner:rule """
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX seas: <https://w3id.org/seas/>
INSERT { 
  ?exec ?prop [ a seas:PropertyBinding ] . 
} WHERE { 
  ?exec a seas:ProcessExecution .
  {
    ?exec seas:executedBy ?o .
  }
  UNION {
    ?exec seas:methodUsed ?o .
  }
  ?prop a qb:ComponentProperty .
  ?o ?prop ?propertyBinding .
  ?propertyBinding a seas:PropertyBinding .
}"""^^<urn:iana:type:application/sparql-rule> . 

<https://w3id.org/seas/ProcessOntologyRule-4> rdfs:comment "ensures concepts are propagated for property bindings."@en ;
 liner:rule """
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX seas: <https://w3id.org/seas/>
INSERT { 
  ?propertyBinding seas:concept ?concept .
} WHERE { 
  ?exec a seas:ProcessExecution ;
    ?prop ?propertyBinding .
  ?prop a qb:ComponentProperty .
  ?propertyBinding a ?seas:PropertyBinding .
  {
    ?exec seas:executedBy ?o .
  }
  UNION {
    ?exec seas:methodUsed ?o .
  }
  ?o ?prop ?otherPropertyBinding .
  ?otherPropertyBinding a seas:PropertyBinding .
  ?otherPropertyBinding seas:concept ?concept .
}"""^^<urn:iana:type:application/sparql-rule> . 

<https://w3id.org/seas/ProcessOntologyRule-5> liner:rule """
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX seas: <https://w3id.org/seas/>
INSERT { 
  ?propertyBinding seas:toProperty ?p .
} WHERE { 
  ?exec a seas:ProcessExecution ;
    ?prop ?propertyBinding .
  ?prop a qb:ComponentProperty .
  ?propertyBinding a ?seas:PropertyBinding .
  {
    ?exec seas:executedBy ?o .
  }
  UNION {
    ?exec seas:methodUsed ?o .
  }
  ?o ?prop ?otherPropertyBinding .
  ?otherPropertyBinding a seas:PropertyBinding .
  ?otherPropertyBinding seas:toProperty ?p .
  FILTER( !isBlank(?p) )
}"""^^<urn:iana:type:application/sparql-rule> . 

# to be completed !!!

